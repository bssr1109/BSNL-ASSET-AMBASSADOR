import streamlit as st
import base64
from PIL import Image
import pandas as pd
import numpy as np
from geopy.distance import geodesic
from io import BytesIO

st.set_page_config(page_title="BSNL Employee Mapping for Asset Ambassador", layout="wide")

# --- Display logo from base64 ---
logo_base64 = ""
logo_bytes = base64.b64decode(logo_base64)
image = Image.open(BytesIO(logo_bytes))
st.image(image, width=150)
st.title("📊 BSNL Employee Mapping for Asset Ambassador")

# Persistent footer for all pages
st.markdown("<hr style='margin-top: 2em; margin-bottom: 1em;'>", unsafe_allow_html=True)
st.markdown("<div style='text-align: center; color: grey;'>Developed by BSNL Warangal OA, Telangana Circle</div>", unsafe_allow_html=True)

st.markdown("Upload the required files below to begin the allocation process.")

# File uploads
exec_file = st.file_uploader("Upload Executive File (.xlsx)", type=["xlsx"])
bts_file = st.file_uploader("Upload BTS Assets File (.xlsx)", type=["xlsx"])
olte_file = st.file_uploader("Upload OLTE Assets File (.xlsx)", type=["xlsx"])
latlong_file = st.file_uploader("Upload SDCA Lat/Long File (.xlsx)", type=["xlsx"])

def parse_dms(dms_str):
    try:
        value = float(str(dms_str).replace('°', '').replace('N', '').replace('E', '').strip())
        return value
    except Exception:
        return np.nan

def compute_proximity_map(latlong_df):
    latlong_df.columns = latlong_df.columns.str.strip().str.lower()
    required_cols = {'sdca', 'latitude', 'longitude'}
    if not required_cols.issubset(set(latlong_df.columns)):
        st.error("Lat/Long file must contain columns: SDCA, Latitude, Longitude")
        st.stop()

    latlong_df['latitude'] = latlong_df['latitude'].apply(parse_dms)
    latlong_df['longitude'] = latlong_df['longitude'].apply(parse_dms)

    coords = {
        row['sdca']: (row['latitude'], row['longitude'])
        for _, row in latlong_df.iterrows()
        if not np.isnan(row['latitude']) and not np.isnan(row['longitude'])
    }
    proximity_map = {}
    for sdca1, coord1 in coords.items():
        distances = [
            (sdca2, geodesic(coord1, coord2).km)
            for sdca2, coord2 in coords.items() if sdca2 != sdca1
        ]
        distances.sort(key=lambda x: x[1])
        proximity_map[sdca1] = [d[0] for d in distances]
    return proximity_map

def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False)
    processed_data = output.getvalue()
    return processed_data

if exec_file and bts_file and olte_file and latlong_file:
    st.success("All required files uploaded!")

    executives_df = pd.read_excel(exec_file)
    bts_df = pd.read_excel(bts_file)
    olte_df = pd.read_excel(olte_file)
    olte_df.columns = olte_df.columns.str.strip()
    latlong_df = pd.read_excel(latlong_file)

    bts_df['Asset ID'] = bts_df['RP ID']
    bts_df['Type'] = 'BTS'
    bts_df = bts_df[['Asset ID', 'SDCA', 'Total Revenue', 'Voice Traffic', 'Data Traffic', 'Type']].rename(columns={'Total Revenue': 'Revenue'})

    olte_df['Asset ID'] = olte_df['OLTE IP'].astype(str) + ' at ' + olte_df['LOCATION'].astype(str)
    olte_df['Type'] = 'OLTE'
    olte_df = olte_df[['Asset ID', 'SDCA', 'Revenue@ Rs 641/FTTH', 'FTTH', 'Type']].rename(columns={'Revenue@ Rs 641/FTTH': 'Revenue'})
    assets_df = pd.concat([bts_df, olte_df], ignore_index=True)
    assets_df['Allocated'] = False

    executives_df = executives_df[['HR.no', 'NAME', 'SDCA']].rename(columns={'HR.no': 'Employee ID', 'NAME': 'Employee Name'})
    executives_df['Total Revenue'] = 0.0
    executives_df['Assigned Assets'] = [[] for _ in range(len(executives_df))]

    proximity_map = compute_proximity_map(latlong_df)

    # Calculate revenue thresholds from actual data
    total_rev = assets_df['Revenue'].sum()
    total_emp = len(executives_df)
    avg_rev = total_rev / total_emp
    lower_limit = avg_rev * 0.60
    upper_limit = avg_rev * 1.40

    high_cutoff = assets_df['Revenue'].quantile(0.90)
    med_cutoff = assets_df['Revenue'].quantile(0.75)
    UPPER_LIMIT = upper_limit

    st.markdown(f"**📈 Average Revenue/Employee**: ₹{avg_rev:,.0f}")
    st.markdown(f"**🔻 Minimum Target (60%)**: ₹{lower_limit:,.0f}")
    st.markdown(f"**🔺 Maximum Cap (140%)**: ₹{upper_limit:,.0f}")

    preview_outliers = assets_df[assets_df['Revenue'] >= upper_limit]
    with st.expander("🔍 Preview High-Value Outlier Assets (≥ Max Cap)"):
        st.dataframe(preview_outliers[['Asset ID', 'SDCA', 'Revenue', 'Type']].sort_values(by='Revenue', ascending=False))

    # Phase 1 is always enabled by logic, no checkbox needed
    phase1_enabled = True

    if st.button("Proceed to Allocation") :
        st.info("Allocating assets...")

        locked_employees = set()

        # Step 1: Assign high-value assets (>= upper_limit — potential outliers)
        for idx, asset in assets_df[assets_df['Revenue'] >= upper_limit].iterrows():
            for sdca in [asset['SDCA']] + proximity_map.get(asset['SDCA'], []):
                candidates = executives_df[(executives_df['SDCA'] == sdca) & (~executives_df.index.isin(locked_employees))]
                if not candidates.empty:
                    emp_idx = candidates.index[0]
                    executives_df.at[emp_idx, 'Total Revenue'] += asset['Revenue']
                    executives_df.at[emp_idx, 'Assigned Assets'].append(asset['Asset ID'])
                    assets_df.at[idx, 'Allocated'] = True
                    locked_employees.add(emp_idx)
                    break

        # Step 2: Assign medium-value assets (>= med_cutoff)
        for idx, asset in assets_df[(~assets_df['Allocated']) & (assets_df['Revenue'] >= med_cutoff)].iterrows():
            for sdca in [asset['SDCA']] + proximity_map.get(asset['SDCA'], []):
                candidates = executives_df[(executives_df['SDCA'] == sdca) & (~executives_df.index.isin(locked_employees))]
                if not candidates.empty:
                    emp_idx = candidates.index[0]
                    executives_df.at[emp_idx, 'Total Revenue'] += asset['Revenue']
                    executives_df.at[emp_idx, 'Assigned Assets'].append(asset['Asset ID'])
                    assets_df.at[idx, 'Allocated'] = True
                    locked_employees.add(emp_idx)
                    break

        # Step 3: Round-robin remaining employees
        from collections import deque
        emp_queue = deque(executives_df[(~executives_df.index.isin(locked_employees)) & (executives_df['Total Revenue'] < lower_limit)].sort_values(by='Total Revenue').index)
        for idx, asset in assets_df[~assets_df['Allocated']].iterrows():
            if not emp_queue:
                break
            for _ in range(len(emp_queue)):
                emp_idx = emp_queue[0]
                emp_sdca = executives_df.at[emp_idx, 'SDCA']
                if emp_sdca in [asset['SDCA']] + proximity_map.get(asset['SDCA'], []):
                    current = executives_df.at[emp_idx, 'Total Revenue']
                    if current + asset['Revenue'] <= UPPER_LIMIT:
                        executives_df.at[emp_idx, 'Total Revenue'] = current + asset['Revenue']
                        executives_df.at[emp_idx, 'Assigned Assets'].append(asset['Asset ID'])
                        assets_df.at[idx, 'Allocated'] = True
                        if executives_df.at[emp_idx, 'Total Revenue'] >= lower_limit:
                            emp_queue.popleft()
                        else:
                            emp_queue.rotate(-1)
                        break
                emp_queue.rotate(-1)

        # Step 4: Force assign any remaining
        for idx, asset in assets_df[~assets_df['Allocated']].iterrows():
            emp_idx = executives_df['Total Revenue'].idxmin()
            executives_df.at[emp_idx, 'Total Revenue'] += asset['Revenue']
            executives_df.at[emp_idx, 'Assigned Assets'].append(asset['Asset ID'])
            assets_df.at[idx, 'Allocated'] = True

        # Step 5: Rebalancing to bring all above 1.6L
        underfilled = executives_df[executives_df['Total Revenue'] < 1.6e5].copy()
        surplus = executives_df[executives_df['Total Revenue'] > lower_limit].copy()
        for under_idx in underfilled.index:
            for surplus_idx in surplus.index:
                for aid in executives_df.at[surplus_idx, 'Assigned Assets'][:]:
                    rev = assets_df.loc[assets_df['Asset ID'] == aid, 'Revenue'].values[0]
                    if executives_df.at[surplus_idx, 'Total Revenue'] - rev >= lower_limit and executives_df.at[under_idx, 'Total Revenue'] + rev <= UPPER_LIMIT:
                        executives_df.at[surplus_idx, 'Total Revenue'] -= rev
                        executives_df.at[surplus_idx, 'Assigned Assets'].remove(aid)
                        executives_df.at[under_idx, 'Total Revenue'] += rev
                        executives_df.at[under_idx, 'Assigned Assets'].append(aid)
                        break
                if executives_df.at[under_idx, 'Total Revenue'] >= 1.6e5:
                    break

        executives_df['Asset Count'] = executives_df['Assigned Assets'].apply(lambda x: len(x))
        executives_df['Assigned Assets'] = executives_df['Assigned Assets'].apply(lambda x: ', '.join(x))

        st.success("✅ Asset allocation complete! Developed by BSNL Warangal OA, Telangana Circle")
        st.download_button("📥 Download Final Allocation", data=to_excel(executives_df), file_name="final_employee_asset_allocation.xlsx")

        # Generate detailed mapping output
        detailed_rows = []
        for _, row in executives_df.iterrows():
            emp_id = row['Employee ID']
            emp_name = row['Employee Name']
            sdca = row['SDCA']
            assets = row['Assigned Assets'].split(', ')
            for aid in assets:
                asset_info = assets_df[assets_df['Asset ID'] == aid]
                if not asset_info.empty:
                    arow = asset_info.iloc[0]
                    detailed_rows.append({
                        'Employee Name': emp_name,
                        'Employee ID': emp_id,
                        'SDCA': sdca,
                        'Asset ID': aid,
                        'Asset Type': arow['Type'],
                        'Asset Revenue': arow['Revenue'],
                        'Voice Traffic': arow.get('Voice Traffic', '') if arow['Type'] == 'BTS' else '',
                        'Data Traffic': arow.get('Data Traffic', '') if arow['Type'] == 'BTS' else '',
                        'FTTH': arow.get('FTTH', '') if arow['Type'] == 'OLTE' else ''
                    })

        detailed_df = pd.DataFrame(detailed_rows)
        st.download_button("📥 Download Detailed Asset Mapping", data=to_excel(detailed_df), file_name="detailed_asset_mapping.xlsx")

        st.markdown("<hr style='margin-top: 2em; margin-bottom: 1em;'>", unsafe_allow_html=True)
        st.markdown("<div style='text-align: center; color: grey;'>Developed by BSNL Warangal OA, Telangana Circle</div>", unsafe_allow_html=True)
